11/01/2020
Current features:
The script collects data from Excel database uploads in whatever file it is
pointed using a path input by the user. The folliwng information is then
printed:
Total number of database entries
Total number of T121 entries
Total number of Transnetyx entries
Percentage of T121 retests
Percentage of T121 failed
Percentage of Transnetyx retests
Percentage of Transnetyx failed
Additionally, the script also prints out the time started and finished with
collecting the data and generating the dataframes and the time taken.

11/01/2020
Fixes:
- Added except statements to fix KeyError crash that occurred if
df_all_entries had no 'Plate Barcode' or 'Plate' columns.
- Addressed a script breakage that would occur when the df_transnetyx 
dataframe was empty by putting the percentage of transnetyx retests and 
failures calculations in an if statement.

Changes:
- Removed a few comments.
- Removed the printing of times started and finished with harvesting entries
and generating the dataframes. (Time taken still remains.)


15/01/2020
Changes:
- Added and altered some comments.
- The minutes and seconds for time taken for harvesting and editing now round to whole numbers


19/01/2020
Changes:
- Attempts made at tidying the script by altering spacing of lines and removing comments.
- Modified some of the strings.
- Added a PermissionError and except statement for unknown error to the try statement when reading in the excel files.

Additions:
- The script now prints out the total number of plates with uploads for T121 and Transnetyx.


20/01/2020
Fixes:
- Added a % symbol to the readouts strings for percentage T121 retests and failed.

Additions:
- Re-added time printout for when the script starts collecting, editing and generating data.
- Added a string reading "Time finished with generating 'df_all_entries' with a current time printout. This was added to
check how long the script needed to read all the files for an entire yaer folder and to ensure that the step of creating
df_all_entries was reached during times the script took long to generate data for a year folder.
- Added a string reading "Time finished with splitting 'df_all_entries' into T121 and Transnetyx DFs: " with a current time
printout to check if and when the script had reached the stage of generating the two dataframes for T121 and Transnetyx.

Changes:
- Moved the "time taken" block towards the end of the script, just before the final data printouts.
It now reads "Time taken to generate data: ".


22/01/2020
Changes:
- The script now uses a different method to create the DFs for Transnetyx and T121 by filtering df_all_entries based on whether
the first letter of the plate is a 'T' or not. Gone are the for loops and replaced with a much simpler subsetting of 
df_all_entries using a boolean variable. This has drastically cut down the time for this filtering, allowing the script to
tackle entire year folders and also reduced the number of lines of code for easier oversight.

Fixes:
- Changed a string reading: "'df_t121 does not' does not contain a 'Plate Barcode' column." to 
"'df_transnetyx does not' does not contain a 'Plate Barcode' column." for accuracy to prevent confusion when diagnosing 
except statements.


23/01/2020
Changes:
- Removed printout of time taken to split df_all_entries into separate DFS for T121 and Transnetyx. It was no longer
needed as a diagnostic tool after the replacement of the for loops for sorting by boolean variable subsetting as this cut
down the time drastically.


26/01/2020
Fixes:
- The script should now incorporate gender uploads into its data output with the addition of df_gender.
- Hopefully fixed an issue where incorrect boolean variable subsetting was causing an inflated number of entries to be
counted for T121. The script filtered based on the first letter of the plate not being a 'T', likely causing it to count
empty fields too. The filter was altered to look for the first letter being an 'S' or 'C' instead for T121 plates.

Changes:
-Changed the spacing of some of the lines.


31/01/2020
Changes:
- The returned to counting T121 entries as those which do not feature a plate starting with 'T' in the two plate columns.
Testing concluded that, although this method also has issues particularly with interpretation of peformance, capturing 
all entries which are not associated with a Transnetyx plate seemed a fair measure of T121 output.
Gender uploads are no longer being added to the total count for T121 entries. However, gender 'U' entries are now
counted towards the T121 failed percentage.


26/04/2020
Additions:
- Added some printed messages which inform the user on the progress of the data
collection
- Added in code and printouts for obtaining the number of mice with uploads,
number of uploaded genotypes, and number of colonies for T121.

Changes:
- Removed a lot of the error messages which gave information when an except statement
got triggered. There was redundancy there, sometimes too many would pop up, and it
wasn't very clean to have a bunch of text pop up before the metrics printout.


There is now a new kid on the block. We are pleased to introduce 
Genotyping_Assignments_Report_performance_metrics.py

This newcomer has so many advantages over its predecessor solving many caveats. 
The report allowes a date range to be specified during which genotypes were 
uploaded by specific users, giving much greater control over the timeframe 
to be analysed, be it week, month, or year. In addition, the database is a 
more accurate source of information than the team drive as it solves the potential
problem the original method had that the team drive was never a truly accurate
representation of uploads. Also, the reports offer far more information than
the upload files do, creating the possibility for more metrics to be generated
and for other scripts to be improved in the future.

The new script captures the database report via a user input file path and creates
a class. From there, it works very similarly to the original script creating
three atributes by filtering the report into three separate dataframes of T21,
Transnetyx, and all entries. Current methods can return number of entries, plates,
mice, genotypes, and colonies for each one of the the dataframes. A method called
"whose_data" determines which dataframe is selected via an argument for each
results method. "get_stats" method returns strings with printouts of the metrics
for a desired dataframe.




